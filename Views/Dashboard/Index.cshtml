

@{
    ViewBag.Title = "Microsoft EV Charging";
}

<p>
    <img src="~/Dashboard.png" width="800"/>
</p>
<br />
<hr />
<p>
    <div id="chargers" width="800">Please wait while charger usage data is collected...</div>
</p>

@section scripts {
    <script src="~/lib/Chart.js/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function ()
        {
            const config = {
                type: 'line',
                options: {
                    spanGaps: true,
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                        },
                        title: {
                            display: true,
                            text: 'EV Charger Meter Values'
                        }
                    },
                    scales: {
                        xAxis: [{
                            type: 'timeseries'
                        }],
                        yAxis: [{
                            ticks:
                            {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            };

            // connection to SignalR hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/statusHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            const CHART_COLORS = {
                red: 'rgb(255, 0, 0)',
                magenta: 'rgb(255, 0, 255)',
                yellow: 'rgb(255, 255, 0)',
                green: 'rgb(0, 128, 0)',
                blue: 'rgb(0, 0, 255)',
                cyan: 'rgb(0, 255, 255)',
                grey: 'rgb(128, 128, 128)',
                black: 'rgb(0, 0, 0)',
                silver: 'rgb(192, 192, 192)',
                lime: 'rgb(0, 255, 0)',
                maroon: 'rgb(128, 0, 0)',
                olive: 'rgb(128, 128, 0)',
                purple: 'rbg(128, 0, 128)',
                teal: 'rgb(0, 128, 128)',
                navy: 'rgb(0, 0, 128)'
            };

            const NAMED_COLORS = [
                CHART_COLORS.red,
                CHART_COLORS.magenta,
                CHART_COLORS.yellow,
                CHART_COLORS.green,
                CHART_COLORS.blue,
                CHART_COLORS.cyan,
                CHART_COLORS.grey,
                CHART_COLORS.black,
                CHART_COLORS.silver,
                CHART_COLORS.lime,
                CHART_COLORS.maroon,
                CHART_COLORS.olive,
                CHART_COLORS.purple,
                CHART_COLORS.teal,
                CHART_COLORS.navy
            ];

            function namedColor(index)
            {
                return NAMED_COLORS[index % NAMED_COLORS.length];
            }

            var myChart = new Array();

            connection.on("addChargers", function (html)
            {
                document.getElementById("chargers").innerHTML = html;
            });

            connection.on("availableStatus", function (name, available)
            {
                //document.getElementById(name + "notify").visible = !available;
            });

            connection.on("addChart", function (name)
            {
                var newChart = new Chart(document.getElementById(name), config);
                newChart.options.plugins.title.text = name;

                const dsColor = namedColor(4);
                const newDataset = {
                    label: "",
                    borderColor: dsColor,
                    borderwidth: 3,
                    cubicInterpolationMode: 'monotone',
                    tension: 0.5
                };
                newChart.data.datasets.push(newDataset);
                myChart.push(newChart);
            });

            // add data function
            connection.on("addDataToChart", function (name, timestamps, values)
            {
                for (var i = 0; i < myChart.length; i++)
                {
                    if (myChart[i].options.plugins.title.text === name)
                    {
                        myChart[i].data.labels = timestamps;
                        myChart[i].data.datasets[0].data = values;
                        myChart[i].update();
                        break;
                    }
                }
            });

            // clear data function
            connection.on("removeDataFromCharts", function ()
            {
                while (myChart.length > 0)
                {
                    while (myChart[myChart.length - 1].data.labels.length > 0)
                    {
                        myChart[myChart.length - 1].data.labels.pop();
                        myChart[myChart.length - 1].data.datasets.pop();
                    }

                    myChart[myChart.length - 1].update();
                    myChart[myChart.length - 1].destroy();
                    myChart.pop();
                }
            });

            // add status table function
            connection.on("addStatusTable", function (name, html)
            {
                document.getElementById(name + "statustable").innerHTML = html;
            });

            // add transaction table function
            connection.on("addTransactionTable", function (name, html)
            {
                document.getElementById(name + "transactiontable").innerHTML = html;
            });

            connection.start().then(function ()
            {
                console.log('SignalR connection started');
            })
            .catch(error =>
            {
                console.error('SignalR error: ' + error.message);
            });
        });
    </script>
}
